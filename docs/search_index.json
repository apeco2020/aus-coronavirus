[
["index.html", "A clean and uncluttered report of coronavirus for Australians 1 Shiny apps for COVID19 1.1 John Coene instiitue 1.2 ncov19 package", " A clean and uncluttered report of coronavirus for Australians Anthony Davidson 17 March 2020 1 Shiny apps for COVID19 1.1 John Coene instiitue 1.2 ncov19 package "],
["data-accessed.html", " 2 Data accessed", " 2 Data accessed The data is accessed from the following sources: Then I explain what is my input data and I load it. Here is how it looks like: "],
["a-few-analysis.html", " 3 A few analysis 3.1 basic 3.2 grouped 3.3 complex", " 3 A few analysis Here are 3 version of a circular barplot that you can find in the R graph gallery. Note that the figure is centered. You can change the size of the plot with fig.width and fig.height 3.1 basic Letâ€™s start with a basic version of a circular representation of the data # Create dataset data=data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; empty_bar=10 # Add lines to the initial dataset to_add = matrix(NA, empty_bar, ncol(data)) colnames(to_add) = colnames(data) data=rbind(data, to_add) data$id=seq(1, nrow(data)) # Get the name and the y position of each label label_data=data number_of_bar=nrow(label_data) angle= 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust&lt;-ifelse( angle &lt; -90, 1, 0) label_data$angle&lt;-ifelse(angle &lt; -90, angle+180, angle) # Make the plot p = ggplot(data, aes(x=as.factor(id), y=value)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(stat=&quot;identity&quot;, fill=&quot;#69b3a2&quot;) + ylim(-100,120) + theme_minimal() + theme( axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar(start = 0) + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) p 3.2 grouped # Create dataset data=data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar=4 to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) ) colnames(to_add) = colnames(data) to_add$group=rep(levels(data$group), each=empty_bar) data=rbind(data, to_add) data=data %&gt;% arrange(group) data$id=seq(1, nrow(data)) # Get the name and the y position of each label label_data=data number_of_bar=nrow(label_data) angle= 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust&lt;-ifelse( angle &lt; -90, 1, 0) label_data$angle&lt;-ifelse(angle &lt; -90, angle+180, angle) # Make the plot p = ggplot(data, aes(x=as.factor(id), y=value, fill=group)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(stat=&quot;identity&quot;, alpha=0.5) + ylim(-100,120) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) p 3.3 complex # Create dataset data=data.frame( individual=paste( &quot;Mister &quot;, seq(1,60), sep=&quot;&quot;), group=c( rep(&#39;A&#39;, 10), rep(&#39;B&#39;, 30), rep(&#39;C&#39;, 14), rep(&#39;D&#39;, 6)) , value=sample( seq(10,100), 60, replace=T) ) # Set a number of &#39;empty bar&#39; to add at the end of each group empty_bar=3 to_add = data.frame( matrix(NA, empty_bar*nlevels(data$group), ncol(data)) ) colnames(to_add) = colnames(data) to_add$group=rep(levels(data$group), each=empty_bar) data=rbind(data, to_add) data=data %&gt;% arrange(group) data$id=seq(1, nrow(data)) # Get the name and the y position of each label label_data=data number_of_bar=nrow(label_data) angle= 90 - 360 * (label_data$id-0.5) /number_of_bar # I substract 0.5 because the letter must have the angle of the center of the bars. Not extreme right(1) or extreme left (0) label_data$hjust&lt;-ifelse( angle &lt; -90, 1, 0) label_data$angle&lt;-ifelse(angle &lt; -90, angle+180, angle) # prepare a data frame for base lines base_data=data %&gt;% group_by(group) %&gt;% summarize(start=min(id), end=max(id) - empty_bar) %&gt;% rowwise() %&gt;% mutate(title=mean(c(start, end))) # prepare a data frame for grid (scales) grid_data = base_data grid_data$end = grid_data$end[ c( nrow(grid_data), 1:nrow(grid_data)-1)] + 1 grid_data$start = grid_data$start - 1 grid_data=grid_data[-1,] # Make the plot p = ggplot(data, aes(x=as.factor(id), y=value, fill=group)) + # Note that id is a factor. If x is numeric, there is some space between the first bar geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=&quot;identity&quot;, alpha=0.5) + # Add a val=100/75/50/25 lines. I do it at the beginning to make sur barplots are OVER it. geom_segment(data=grid_data, aes(x = end, y = 80, xend = start, yend = 80), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 60, xend = start, yend = 60), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 40, xend = start, yend = 40), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + geom_segment(data=grid_data, aes(x = end, y = 20, xend = start, yend = 20), colour = &quot;grey&quot;, alpha=1, size=0.3 , inherit.aes = FALSE ) + # Add text showing the value of each 100/75/50/25 lines annotate(&quot;text&quot;, x = rep(max(data$id),4), y = c(20, 40, 60, 80), label = c(&quot;20&quot;, &quot;40&quot;, &quot;60&quot;, &quot;80&quot;) , color=&quot;grey&quot;, size=3 , angle=0, fontface=&quot;bold&quot;, hjust=1) + geom_bar(aes(x=as.factor(id), y=value, fill=group), stat=&quot;identity&quot;, alpha=0.5) + ylim(-100,120) + theme_minimal() + theme( legend.position = &quot;none&quot;, axis.text = element_blank(), axis.title = element_blank(), panel.grid = element_blank(), plot.margin = unit(rep(-1,4), &quot;cm&quot;) ) + coord_polar() + geom_text(data=label_data, aes(x=id, y=value+10, label=individual, hjust=hjust), color=&quot;black&quot;, fontface=&quot;bold&quot;,alpha=0.6, size=2.5, angle= label_data$angle, inherit.aes = FALSE ) + # Add base line information geom_segment(data=base_data, aes(x = start, y = -5, xend = end, yend = -5), colour = &quot;black&quot;, alpha=0.8, size=0.6 , inherit.aes = FALSE ) + geom_text(data=base_data, aes(x = title, y = -18, label=group), hjust=c(1,1,0,0), colour = &quot;black&quot;, alpha=0.8, size=4, fontface=&quot;bold&quot;, inherit.aes = FALSE) p "],
["conclusion.html", " 4 Conclusion", " 4 Conclusion Read more about this template here. Learn how to custom your R Markdown document here. "]
]
